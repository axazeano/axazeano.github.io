<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Не блог]]></title>
  <link href="http://axazeano.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://axazeano.github.io/"/>
  <updated>2017-01-05T21:05:18+03:00</updated>
  <id>http://axazeano.github.io/</id>
  <author>
    <name><![CDATA[axazeano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Гайд по Linux для начинающих. Часть 2]]></title>
    <link href="http://axazeano.github.io/blog/2017/01/05/linux-guide-for-beginers-part-2/"/>
    <updated>2017-01-05T01:13:42+03:00</updated>
    <id>http://axazeano.github.io/blog/2017/01/05/linux-guide-for-beginers-part-2</id>
    <content type="html"><![CDATA[<h3>Просмотр текстовых файлов</h3>

<p><img src="/images/user_images/read_files.png"></p>

<p>Существует несколько утилит для просмотра текстовых файлов в консоли, такие как <code>cat</code>, <code>less</code>, и немного специфичные <code>head</code>, <code>tail</code>. Давай посмотрим на них подробнее:</p>

<h4><code>less</code></h4>

<p>Удобная утилита для просмотра текстовых файлов в консоли. Для базового использования достаточно набрать</p>

<p><code>less my_text_document</code></p>

<p><img src="/images/user_images/less_example.png"></p>

<p>Документ отобразится на экране, его можно листать вверх/вниз/влево/вправо, искать слова.
Утилита <code>less</code> позаимствовала команды у своей предшедственницы, утилиты <code>more</code>, которая выполняла схожие функции, но по сравнению с <code>less</code> имеет некоторые недостатки. Также, часть команд <code>less</code> взяла из утилиты <code>vi</code>, которая является очень продвинутым текстовым редактором.</p>

<p>Для выхода из <code>less</code> достаточно нажать на клавишу <code>q</code>. Если не работает, скорее всего у вас включена русская раскладка клавиатуры.</p>

<!-- more -->


<p>В <code>less</code> поиск осуществляется от начала документа к концу при помощи символа <code>/</code> + искомая строка. То есть если вы хотите найти слово <code>foo</code> в начале документа, наберите <code>/foo</code>.</p>

<p>Также присутсвтует поиск с конца документа, при помощи символа <code>?</code>. Аналогичным образом набираете <code>?foo</code>.</p>

<p>Для перехода к следующему совпадению нажмите на &lsquo;n&rsquo;, к предыдущему - <code>N</code>
(т.е. <code>shift</code> + <code>n</code>).</p>

<blockquote><p><img src="/images/user_images/less_search.png">
пример поиска фразы <code>bar</code></p></blockquote>

<p>Чтобы перейти в самое начало документа используйте клавишу <code>g</code>, в конец документа -
<code>G</code>.</p>

<h4><code>cat</code></h4>

<p><img src="/images/user_images/how_cat_work.png"></p>

<p>Название этой утилиты не имеет ничего общего с котами и кошками и является сокращением от concatenate (конкатенация). При помощи этой утилиты можно конкатенировать файлы. Воу воу, что же такое <strong>конкатенация</strong>? Давайте обратимся к википедии:</p>

<blockquote><p>Конкатена́ция (лат. concatenatio «присоединение цепями; сцепле́ние») — операция склеивания объектов линейной структуры, обычно строк. Например, конкатенация слов «микро» и «мир» даст слово «микромир».</p></blockquote>

<p>При конкатенации файлов текста из них будут просто объединяться, однако, как это поможет нам прочесть файл? Давайте глянем в документацию, а именно в <code>man cat</code>:</p>

<p><img src="/images/user_images/man_cat.png"></p>

<p>Утилита <code>cat</code> не только конкатенирует файлы, но и печатает их на консоль, чем собственно мы и воспользуемся. Если мы передадим всего один файл в эту утилиту, то она просто напечатает его на экране (и впрямь, объединять его ведь не с чем):</p>

<p><img src="/images/user_images/cat_single_file.png"></p>

<p><img src="/images/user_images/cat_first_example.png">
<br>
Давай попробуем объединить два файла и вывести их на экран:</p>

<p><img src="/images/user_images/cat_second_example.png"></p>

<hr>


<h3><code>head</code></h3>

<p><img src="/images/user_images/how_head_works.png"></p>

<p>Эта утилита выводит несколько первых строк из файла. Просто и удобно. Зачем это нужно, скажете вы? Допустим, у нас есть файл, причем файл довольно объемный, мегабайт так на 50. При помощи <code>cat</code> его не просмотришь, он просто не влезет в консоль (да да, вывод в консоль ограничивается некоторым числом строк, число выставляется в настройках эмулятора терминала) и будет показан только его конец.</p>

<blockquote><p>Настройка числа строк в iTerm 2. Есть опция неограниченного числа строк (unlimited srollback), но в нашем случае это не панацея
<img src="/images/user_images/scrollback_lines.png"></p></blockquote>

<p>Давате попробуем <code>head</code> в деле. Для начала сделаем файл с несколькими строками:
<img src="/images/user_images/create_multilines_file.png"></p>

<p>Вначале объединим два наших файла и вывод утилиты <code>cat</code> направим в новый файл. Затем добавим новую строку при помощи команды <code>echo</code>.</p>

<p>Проверим содержимое файла:</p>

<p><img src="/images/user_images/check_multilines_file.png"></p>

<p>Затем глянем в <code>man head</code>:</p>

<p><img src="/images/user_images/man_head.png"></p>

<hr>


<h4>Мини-раздел &ldquo;читаем документацию в <code>man</code>&rdquo;</h4>

<p>Очень важно научиться читать документацию. Да, она на английском языке, поэтому вооружаемся словариками. Пройдемся по разделам и попробуем понять, что же из себя представляет утилита <code>head</code>:</p>

<p><strong>NAME</strong></p>

<p>Приведено название команды и что она в принципе делает. Вольный перевод:</p>

<p><code>head --отоборажает первые строки файла</code></p>

<p><strong>SYNOPSIS</strong></p>

<p>Синопсис содержит в себе информацию о том, как можно использовать команду. Синопсис утилиты <code>head</code> выглядит следующим образом:</p>

<p><code>head [-n count | -c bytes] [file ...]</code></p>

<p>Как это понимать? Для начала взглянем на то, что он разделён на блоки:
- <code>head</code> - имя утилиты
- <code>[-n count | -c bytes]</code> - флаги с параметрами
- <code>[file ...]</code> - основные параметры утилиты</p>

<p>Давайте попробуем разобраться что к чему. С первым блоком должно быть все понятно.</p>

<p>Второй блок заключен в квадратные скобки. Что это значит? Квадратные скобки означают то, <strong>что находиться в них является необязательным</strong>!. Мы можем вызвать команду без этого блока.</p>

<p>С квадратными скобками мы разобрались и можем их опустить. Теперь можно представить второй блока как <code>-n count | -c bytes</code>. Как было уже сказанно выше, этот блок содержит флаги. Флаги обычно начинаются со знака - и позволяют передать утилите дополнительные параметры. Здесь есть два флага:</p>

<ul>
<li><code>-n count</code> - устанавливаем количество выводимых строк (как мы помним, <code>head</code> выводит несколько первых строк файла)</li>
<li><code>-c bytes</code> - устанавливает количество выводимых байт (например, мы хотим вывести первые 1024 байта, иногда полезно)</li>
</ul>


<p>Как можно заметить, флаги разделяет символ вертикальной черты <strong>|</strong> . Данный символ принято читать как <strong>ИЛИ</strong> . Мы выводим несколько строк <strong>ИЛИ</strong> некоторое количество байт, но вместе эти параметры использовать нельзя.</p>

<p>Взглянем на поледний блок <code>[file ..]</code>. Внутри него можно передать файл или несколько файлов, из которых будут выведены первые строки. По квадратным скобкам становится ясно, что он тоже не обязателен к написанию. Но как же так, если мы не напишем из какого файла выводить строки, что же будет??? Читаем документацию дальше</p>

<p> <strong>Description</strong></p>

<p> Тут уже идет нормальная, человекочитаемая документация на английском языке.</p>

<p><code>This filter displays are the first count lines or bytes for each of the specified files, or of the standart input if no files are specified</code> - Этот фильтр отображает заданное число первых строк или байт из каждого указанного файла или использует стандартный поток ввода если файлы не заданы.</p>

<p>Как видно, <code>head</code> назвали <strong>фильтром</strong>. При помощи него можно фильтровать информацию в так называемых пайплайнах (<code>pipe-line</code>) или как их ещё называют конвеерах. Это отдельная глава, сейчас мы коснёмся её лишь вскользь. И так же мы поняли, что если мы не укажем третий блок с файлами, то утилита <code>head</code> будет брать информацию из <code>stdin</code>.</p>

<p><code>If count is omitted it defaults to 10.</code> - Если число строк не указано, будет использованно значение по-умолчанию равное 10.
Ага, если мы пропускаем второй блок, и не указываем число строк или число байт, то по-умолчанию выводятся первые десять строк.</p>

<p><code>If more than a single file is specified, each file is preceded by a header consisting of the string ``==&gt; XXX &lt;=='' where ``XXX'' is the name of the file.</code> - Если указанно более одного файла, каждый файл будет начинаться со строки вида <code>==&gt; XXX &lt;==</code>, где <code>XXX</code> - имя файла. Ну, сделанно это явно для удобства.</p>

<p><img src="/images/user_images/head_multifile.png"></p>

<p><strong>EXIT STATUS</strong></p>

<p><code>Exit Status</code> - число, которое возвращает утилита по завершению своей работы. По этому числу можно определить, закончила ли программа работу корректно, или случилась какая-то ошибка.</p>

<p><code>The head utility exits 0 on success, and &gt;0 if an error occurs.</code> - Утилита <code>head</code> возвращает <code>0</code> в случае успешного завершения работы и число большее нуля в случае возникновения ошибок.</p>

<p> <strong>SEE ALSO</strong>
 Схожие по функционалу утилиты. В данном случае приведена утилита <code>tail</code></p>

<p> <strong>HISTORY</strong>
 История утилиты</p>

<p> Прочёв документацию можно начать пользоваться утилитой <code>head</code>:
 - <code>head -n 5 foo</code> - читаем 5 первых строк из файла <code>foo</code>
 - <code>head -b 2048 foo</code> - читаем 2048 байт из файла <code>foo</code>
 - <code>head foo</code> - читаем 10 (по-умолчанию) строк из <code>foo</code>
 - <code>cat my_big_file | head -n 20</code> - это один из примеров использования конвеера. Не дай себя запутать, если вы читали про стандартные потоки, то знаете что тут символ прямой линии <strong>|</strong> связывает выходной поток предшествующей ему программы с входным потоком следующим за ним программы. В данном случае в начале мы читаем большой файл <code>my_big_file</code> при помощи утилиты <code>cat</code> и направляем выходной поток не в консоль для вывода текста, а соединяем его с входным потоком утилиты <code>head</code> (заметь, мы вызвали <code>head</code> без указания файла). В данном случае в <code>head</code> попадает текст из утилиты <code>cat</code>, <code>head</code> берёт из него 20 первых строк и выводит на экран</p>

<p> <hr></p>

<h3><code>tail</code></h3>

<p><img src="/images/user_images/man_tail.png"></p>

<p>Задание домой: разобраться в работе <code>tail</code> самостоятельно, утилита схожа с <code>head</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Гайд по Linux для начинающих. Часть 1]]></title>
    <link href="http://axazeano.github.io/blog/2017/01/05/linux-guide-for-beginers-part-1/"/>
    <updated>2017-01-05T00:22:04+03:00</updated>
    <id>http://axazeano.github.io/blog/2017/01/05/linux-guide-for-beginers-part-1</id>
    <content type="html"><![CDATA[<p><img class="[linux logo] <a" src="href="https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/280px-Tux.svg.png">https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/280px-Tux.svg.png</a>" title="[width] [height] [linux logo [linux logo]]" ></p>

<p>Напишу немного о Linux.</p>

<h3>Пути</h3>

<blockquote><p>Путь - коротко говоря то, где расположен файл.</p></blockquote>

<p>Представим, что у нас есть папка <code>foo/</code>, в которой есть другая папка <code>bar/</code>, в которой расположен файл <code>baz/</code>. Тогда путь для файла <code>baz/</code> будет выглядеть как <code>foo/bar/baz/</code></p>

<p>В системах UNIX/Linux все пути начинаются из корневого раздела - <code>/</code>. Это не просто черточка, это указатель на вполне определённый раздел жесткого диска.</p>

<p>Пути бывают двух типов: абсолютные и относительные пути.
В чем же разница?</p>

<p><strong>Абсолютный путь</strong> требует указания ПОЛНОГО перечня директорий до текущей директории. Например, нам нужна директория <code>log/</code>. Для того, чтобы получить доступ к этой директории, нам придётся записать полный её путь от корневого раздела: <code>/var/log</code>. Обрати внимание, что запись пути мы начали с <code>/</code> - корневого раздела, затем записали папку <code>var/</code>, в которой находится директорию <code>log/</code>.</p>

<p><strong>Относительный путь</strong> более умный. Допустим, нам все также требуется получить доступ к файлу <code>log_file</code> в директории <code>/var/log/</code>, но сейчас мы находимся в директорию <code>var/</code>. Чтобы получить доступ к <code>log_file</code> нам достаточно указать путь <code>log/log_file</code>. Терминал знает то, в какой директорию ты сейчас находишься и достаточно указать путь, относительно текущей папки.</p>

<!-- more -->


<p>Домашня директорию <code>/home/&lt;текущий пользователь&gt;/</code> сокращается до <code>~/</code> . Допустим, ты сейчас залогинен под пользователем <code>Ilya</code> . Тогда, для тебя <code>~/</code> будет равносилен <code>/home/Ilya/</code></p>

<p>Символ <code>.</code> - указывает на текущую директорию
Например, мы находимся в папке <code>foo/bar</code> . для нас папка <code>.</code> будет <code>foo/bar/</code></p>

<p>Символ <code>..</code> - указывает на директорию, находящуюся на уровень выше.
Например, мы находимся в папке <code>foo/bar</code> . Для нас папка <code>..</code> будет <code>foo</code>.</p>

<p>Подробней про пути смотри по этой <a href="https://losst.ru/put-k-fajlu-v-linux">ссылке</a></p>

<hr>


<h3>Навигация по файловой системе</h3>

<p>Для перехода по папкам используется команда <code>cd</code> (change directory - смени директорию).
Примеры использования:</p>

<ul>
<li>Перейти в корневой раздел: <code>cd /</code></li>
<li>Перейти в домашнюю директорию: <code>cd ~/</code> или <code>cd /home/&lt;имя текущего пользователя&gt;/</code></li>
<li>Перейти в директорию <code>foo/bar</code>: <code>cd foo/bar</code></li>
<li>Перейти в директорию <code>foo/</code>, находясь в директорию <code>foo/bar/</code>: <code>cd ..</code></li>
<li>Перейти в директорию <code>foo/baz/</code>, находясь в директорию <code>foo/bar/</code>: <code>cd ../baz</code></li>
</ul>


<p>Подробней по команде <code>cd</code> смотри по этой <a href="https://www.google.ru/search?client=ubuntu&amp;channel=fs&amp;q=linux+cd&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=PEVYWLCKB4KG7gS4xrHoAQ">ссылке</a></p>

<hr>


<h3>Просмотр содержимого директорий</h3>

<p>Для просмотра содержимого директорий служит команда <code>ls</code> (От английского list - список)
Примеры использования:</p>

<ul>
<li>Просмотр содержимого текущей директории: <code>ls</code></li>
<li>Просмотр содержимого директории <code>/var/log/</code>: <code>ls /var/log</code></li>
<li>Просмотр содержимого директори <code>foo/baz/</code>, находясь в директории <code>foo/bar/</code>: <code>ls ../baz/</code></li>
</ul>


<p>Подробней по команде <code>ls</code> смотри по этой <a href="https://www.google.ru/search?client=ubuntu&amp;channel=fs&amp;q=linux+ls&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=3ERYWPvaHoKG7gS4xrHoAQ">ссылке</a></p>

<hr>


<h3>Создание файлов в консоли</h3>

<p>Один из способов создания файлов в консоли - использование команды <code>touch</code> (прикосновение с английского)
Пример:
* <code>touch my_file.txt</code> - создаст в текущей папке пустой файл с названием <code>my_file.txt</code>
* <code>touch foo/another_file.txt</code> - создаст в папке <code>./foo</code> файл <code>another_file.txt</code></p>

<p>Подробней по команде <code>touch</code> смотри по этой <a href="https://www.google.ru/search?client=ubuntu&amp;channel=fs&amp;q=linux+touch&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=pkRYWLkpgobuBLjGsegB">ссылке</a></p>

<hr>


<h3>Создание директорий</h3>

<p>Для создания директорий используется команда <code>mkdir</code> (make dir - сделай директорию)
Примеры:</p>

<ul>
<li>создать папку <code>foo/</code>: <code>mkdir foo</code></li>
<li>мы находимся в папке <code>foo/bar/</code>, создать папку <code>foo/baz</code>: <code>mkdir ../baz</code></li>
</ul>


<p>Если необходимо создать последовательность директорий, стоит использовать команду <code>mkdir</code> с ключем <code>-p</code>:
- мы находимся в папке в папке <code>foo/</code>, нам нужно создать директорию <code>foo/bar/baz/</code>. Используя команду без ключа -p нам пришлось бы выполнить две команды:</p>

<ol>
<li><code>mkdir bar/</code> - создаём директорию <code>bar/</code></li>
<li><code>mkdir bar/baz/</code> создаём директорию <code>baz/</code> в директории <code>bar/baz</code></li>
</ol>


<p>Используя ключ <code>-p</code> достаточно выполнить одну:
<code>mkdir -p bar/baz</code></p>

<p>Подробней по команде <code>mkdir</code> смотри по этой <a href="https://www.google.ru/search?client=ubuntu&amp;channel=fs&amp;q=nook+djvu&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=FV1ZWOLmJKW8zAWD3ZmYBw#newwindow=1&amp;safe=off&amp;channel=fs&amp;q=linux+mkdir">ссылке</a></p>

<hr>


<h3>Команда Echo</h3>

<p>Выводит в консоль (на самом деле в stdout, что это такое - читай ниже) переданный ей текст.
<code>echo hello</code> выведет в консоль <code>hello</code></p>

<p>Важно помнить, что есть мы хотим вывести больше одного слова, стоит использовать ковычки:
<code>echo "hello world\!"</code> выведет в консоль <code>hello world\!</code></p>

<p>(\ перед восклицательным знаком - так называемое экранирование)</p>

<p>Более полные примеры смотри по этой <a href="https://www.google.ru/search?client=ubuntu&amp;channel=fs&amp;q=linux%20echo&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=6j9YWOrzJpLHZLOMuaAE">ссылке</a></p>

<hr>


<h3>Стандартные потоки</h3>

<blockquote><p>В средах UNIX/Linux существует такое понятие, как стандартные потоки</p></blockquote>

<p>У каждой программы существует 3 потока данных:</p>

<ul>
<li><code>stdin</code></li>
<li><code>stdout</code></li>
<li><code>stderr</code></li>
</ul>


<p>Информацию о них можешь найти по этой <a href="https://habrahabr.ru/post/55136/">ссылке</a></p>

<hr>


<h3>Создание файлов (и наполнение их текстом) (Часть 2)</h3>

<p>Теперь, прочев про потоки данных мы можем сделать следующее: перенаправить поток <code>stdout</code> команды <code>echo</code> в новый файл:
<code>echo "hello" &gt; new_file.txt</code></p>

<p>Открыв файл, мы увидим текст <code>hello</code>
Чтобы добавить к тексту <code>word</code>, выполним команду <code>echo "word" &gt;&gt; new_file.txt</code>. После выполнения этой команды содержимое файла станет
<code>
hello
world
</code></p>
]]></content>
  </entry>
  
</feed>
